# -*- coding: utf-8 -*-
"""Meta_2_1_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rAzOVyvVV4rMamo65EOjiPX99N4boL3r
"""

import pandas as pd
import numpy as np

df_2011 = pd.read_csv("gt_2011.csv")
df_2012 = pd.read_csv("gt_2012.csv")
df_2013 = pd.read_csv("gt_2013.csv")
df_2014 = pd.read_csv("gt_2014.csv")
df_2015 = pd.read_csv("gt_2015.csv")

dataframes = [df_2011, df_2012, df_2013, df_2014, df_2015]
df_concatenado = pd.concat(dataframes, ignore_index=True)

print(df_concatenado)



x = df_concatenado[['AT', 'AP', 'AH', 'AFDP', 'GTEP', 'TIT', 'TAT', 'CDP']].to_numpy()
y = df_concatenado[['TEY', 'CO', 'NOX']].to_numpy()

q,_ = np.shape(x)
_,m = np.shape(y)

A = np.c_[x, np.ones((q,1))]

# Optimizacion
ATA = A.T @ A
b = A.T @ y
theta = np.linalg.pinv(ATA) @ b

# Evalua la hipotesis
yh = A @ theta

# Evalua metricas
e = y-yh
print(e)

ev = e.flatten(order = 'F')

SSE = ev.T @ ev
MSE = SSE/(q*m)
RMSE = np.math.sqrt(MSE)

# coeficiente de determinaci√≥n (ùëÖ2)
yb = np.mean(y)
e = y-yb
ev = e.flatten(order = 'F')
SST = ev.T @ ev
R2 = 1-SSE/SST
print(R2)